package kubeapiserver

import (
	"context"
	"fmt"
	"time"

	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"

	appsv1 "k8s.io/api/apps/v1"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	clusterv1alpha1 "kubeception.ulfo.fr/api/v1alpha1"
	"kubeception.ulfo.fr/api/v1alpha1"
)

var (
	timeout  = 10 * time.Second
	interval = 3 * time.Second

	crdName = "kube-apiserver"

	replicas                      = 3
	clientNamespace               = "client-10"
	caCertSecretName              = "ca"
	kubeapiserverCertSecretName   = "kube-apiserver"
	serviceaccountsCertSecretName = "service-accounts"
	konnectivityCertSecretName    = "konnectivity"

	selector = map[string]string{
		"app.kubernetes.io/instance": crdName,
		"app.kubernetes.io/name":     "kube-apiserver",
		"cluster-id":                 "client.cluster.id",
	}
)

var _ = Describe("kube-apiserver controller", Ordered, func() {
	ctx := context.Background()
	deployment := &appsv1.Deployment{}
	crd := &clusterv1alpha1.KubeAPIServer{}

	BeforeAll(func() {
		By("Creating client namespace")
		ns := &corev1.Namespace{ObjectMeta: metav1.ObjectMeta{Name: clientNamespace}}
		Expect(k8sClient.Create(ctx, ns)).Should(Succeed())

		By("Creating CA Secret")
		ca := &corev1.Secret{ObjectMeta: metav1.ObjectMeta{Name: caCertSecretName, Namespace: clientNamespace}}
		Expect(k8sClient.Create(ctx, ca)).Should(Succeed())

		By("Creating Kube-Apiserver cert secret")
		kubeapiserverCertSecret := &corev1.Secret{ObjectMeta: metav1.ObjectMeta{Name: kubeapiserverCertSecretName, Namespace: clientNamespace}}
		Expect(k8sClient.Create(ctx, kubeapiserverCertSecret)).Should(Succeed())

		By("Creating Service-accounts cert secret")
		serviceaccountsCertSecret := &corev1.Secret{ObjectMeta: metav1.ObjectMeta{Name: serviceaccountsCertSecretName, Namespace: clientNamespace}}
		Expect(k8sClient.Create(ctx, serviceaccountsCertSecret)).Should(Succeed())

		By("Creating Konnectivity cert secret")
		konnectivityCertSecret := &corev1.Secret{ObjectMeta: metav1.ObjectMeta{Name: konnectivityCertSecretName, Namespace: clientNamespace}, StringData: map[string]string{
			"ca.crt":  "ca",
			"tls.crt": "tls",
			"tls.key": "key",
		}}
		Expect(k8sClient.Create(ctx, konnectivityCertSecret)).Should(Succeed())
	})

	It("Allow to deploy the CRD", func() {
		crd = &clusterv1alpha1.KubeAPIServer{
			ObjectMeta: metav1.ObjectMeta{
				Name:      "kube-apiserver",
				Namespace: clientNamespace,
			},
			Spec: clusterv1alpha1.KubeAPIServerSpec{
				Version:     "v1.26.1",
				ETCDservers: "etcd-client:2379",
				Deployment: clusterv1alpha1.Deployment{
					Name:     "kube-apiserver",
					Replicas: int32(replicas),
					Labels:   selector,
				},
				TLS: clusterv1alpha1.KubeAPIServerTLS{
					CASecretName:              caCertSecretName,
					KubeApiServerSecretName:   kubeapiserverCertSecretName,
					ServiceAccountsSecretName: serviceaccountsCertSecretName,
					KonnectivitySecretName:    konnectivityCertSecretName,
				},
				Options: clusterv1alpha1.KubeAPIServerOptions{
					AdvertiseAddress:      "10.0.0.1",
					ServiceClusterIpRange: "10.32.0.0/24",
				},
			},
		}
		Expect(k8sClient.Create(ctx, crd)).Should(Succeed())
	})

	It("Create a kubeconfig Secret for konnectivity server", func() {
		konnectivitySecret := &corev1.Secret{}
		lookupKey := types.NamespacedName{Name: fmt.Sprintf("%s-kubeconfig", konnectivityCertSecretName), Namespace: clientNamespace}

		Eventually(func() bool {
			err := k8sClient.Get(ctx, lookupKey, konnectivitySecret)
			return !(err != nil)
		}, timeout, interval).Should(BeTrue())
	})

	It("Create a egress configmap for konnectivity server", func() {
		konnectivityEgressCM := &corev1.ConfigMap{}
		lookupKey := types.NamespacedName{Name: "konnectivity-egress", Namespace: clientNamespace}

		Eventually(func() bool {
			err := k8sClient.Get(ctx, lookupKey, konnectivityEgressCM)
			return !(err != nil)
		}, timeout, interval).Should(BeTrue())
	})

	It("Deploy kube-apiserver", func() {
		lookupKey := types.NamespacedName{Name: "kube-apiserver", Namespace: clientNamespace}

		Eventually(func() bool {
			err := k8sClient.Get(ctx, lookupKey, deployment)
			return !(err != nil)
		}, timeout, interval).Should(BeTrue())
	})

	It("Respect the number of replicas", func() {
		Expect(*deployment.Spec.Replicas).To(HaveValue(BeNumerically("==", replicas)))
	})

	It("Respect the labels", func() {
		Expect(deployment.Spec.Template.Labels).To(Equal(selector))
	})

	It("Update deployment", func() {
		lookupKey := types.NamespacedName{Name: "kube-apiserver", Namespace: clientNamespace}
		expectedReplicas := 2
		crd.Spec.Deployment.Replicas = int32(expectedReplicas)
		Expect(k8sClient.Update(ctx, crd)).Should(Succeed())

		deployment := &appsv1.Deployment{}
		Eventually(func() bool {
			k8sClient.Get(ctx, lookupKey, deployment)
			return (*deployment.Spec.Replicas != 2)
		}).Should(BeTrue())
	})

})
